plugins {
    id 'java-library'
    id 'idea'
//    id 'checkstyle'
    id 'jacoco'
}

/*dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
    }
}*/

group 'LengthDemo'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
    testImplementation 'org.assertj:assertj-core:3.10.0'
//    testImplementation 'org.mockito:mockito-junit-jupiter:2.21.0'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
//    implementation 'tk.mybatis:mapper-spring-boot-starter'
//    implementation 'org.mybatis:mybatis'
//    implementation 'org.springframework:spring-jdbc'
//    implementation 'com.graphql-java:graphiql-spring-boot-starter:5.0.2'
//    implementation 'com.graphql-java:voyager-spring-boot-starter:5.0.2'
//    implementation 'com.alibaba:druid-spring-boot-starter:1.1.10'
//    implementation 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
//    implementation "org.flywaydb:flyway-core:5.1.3"

    compileOnly 'org.projectlombok:lombok:1.18.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.2.0.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.0'

}

//checkstyle {
//    toolVersion '8.1'
//    ignoreFailures = false
//    configFile file("$project.rootDir/config/checkstyle/checkstyle.xml")
//    sourceSets = [sourceSets.main]
//
//    checkstyleMain {
//        source = 'src/main/java'
//    }
//}

test {
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

copy {
    from "./config/githooks/"
    into "./.git/hooks/"
    fileMode 0755
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/HelloWorld.class',
                            '**/model/*.class',
                            '**/QuantityUnit.class'
                    ]
            )
        })
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    '**.HelloWorld',
                    '**.model.*',
                    '**.QuantityUnit'
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
    dependsOn(jacocoTestReport)
}

check.dependsOn jacocoTestCoverageVerification